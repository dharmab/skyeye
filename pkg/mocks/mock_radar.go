// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dharmab/skyeye/pkg/radar (interfaces: Radar)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_radar.go -package=mocks github.com/dharmab/skyeye/pkg/radar Radar
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/DCS-gRPC/go-bindings/dcs/v0/common"
	brevity "github.com/dharmab/skyeye/pkg/brevity"
	trackfile "github.com/dharmab/skyeye/pkg/trackfile"
	orb "github.com/paulmach/orb"
	gomock "go.uber.org/mock/gomock"
)

// MockRadar is a mock of Radar interface.
type MockRadar struct {
	ctrl     *gomock.Controller
	recorder *MockRadarMockRecorder
}

// MockRadarMockRecorder is the mock recorder for MockRadar.
type MockRadarMockRecorder struct {
	mock *MockRadar
}

// NewMockRadar creates a new mock instance.
func NewMockRadar(ctrl *gomock.Controller) *MockRadar {
	mock := &MockRadar{ctrl: ctrl}
	mock.recorder = &MockRadarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadar) EXPECT() *MockRadarMockRecorder {
	return m.recorder
}

// FindCallsign mocks base method.
func (m *MockRadar) FindCallsign(arg0 string) *trackfile.Trackfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCallsign", arg0)
	ret0, _ := ret[0].(*trackfile.Trackfile)
	return ret0
}

// FindCallsign indicates an expected call of FindCallsign.
func (mr *MockRadarMockRecorder) FindCallsign(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCallsign", reflect.TypeOf((*MockRadar)(nil).FindCallsign), arg0)
}

// FindNearestGroup mocks base method.
func (m *MockRadar) FindNearestGroup(arg0 orb.Point, arg1 common.Coalition, arg2 brevity.ContactCategory) brevity.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearestGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(brevity.Group)
	return ret0
}

// FindNearestGroup indicates an expected call of FindNearestGroup.
func (mr *MockRadarMockRecorder) FindNearestGroup(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearestGroup", reflect.TypeOf((*MockRadar)(nil).FindNearestGroup), arg0, arg1, arg2)
}

// FindUnit mocks base method.
func (m *MockRadar) FindUnit(arg0 uint32) *trackfile.Trackfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnit", arg0)
	ret0, _ := ret[0].(*trackfile.Trackfile)
	return ret0
}

// FindUnit indicates an expected call of FindUnit.
func (mr *MockRadarMockRecorder) FindUnit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnit", reflect.TypeOf((*MockRadar)(nil).FindUnit), arg0)
}

// GetBullseye mocks base method.
func (m *MockRadar) GetBullseye() *orb.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBullseye")
	ret0, _ := ret[0].(*orb.Point)
	return ret0
}

// GetBullseye indicates an expected call of GetBullseye.
func (mr *MockRadarMockRecorder) GetBullseye() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBullseye", reflect.TypeOf((*MockRadar)(nil).GetBullseye))
}

// Run mocks base method.
func (m *MockRadar) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockRadarMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRadar)(nil).Run), arg0)
}
